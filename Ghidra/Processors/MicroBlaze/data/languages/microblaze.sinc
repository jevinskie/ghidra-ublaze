# sleigh specification file for LM32

define endian=$(ENDIAN);
define alignment=4;

define space ram type=ram_space size=4 wordsize=1 default;
define space register type=register_space size=4;

# General Purpose Registers
define register offset=0x1000 size=4 [
	r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 r23 r24 r25
	r26 r27 r28 r29 r30 r31
];

# Control and Status Registers
define register offset=0x2000 size=4 [
	RPC RMSR REAR RESR RFSR RBTR REDR RPID RZPR RTLBLO RTLBHI RTLBX RTLBSX
	RPVR0 RPVR1 RPVR2 RPVR3 RPVR4 RPVR5 RPVR6 RPVR7 RPVR8 RPVR9 RPVR10 RPVR11 RPVR12
];

@define C "RMSR[29,1]"

define pcodeop software_interrupt;
define pcodeop csr_write;
define pcodeop csr_read;

#
# Tokens
#

define token opfields(32)
	op = (0, 5)
	k = (3, 3)
	c = (4, 4)
	f_rd = (6, 10)
	f_ra = (11, 15)
	f_rb = (16, 20)
	typea_zeros = (21, 31)
	imm16 = (16, 31)
	simm16 = (16, 31) signed
;

attach variables [ dreg sreg srega ] [
	r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 r23 r24 r25
	r26 r27 r28 r29 r30 r31
];

Rel16: reloc is simm16 [ reloc=inst_start+4*simm16; ] {
	export *:4 reloc;
}

Rel26: reloc is simm26 [ reloc=inst_start+4*simm26; ] {
	export *:4 reloc;
}

# RelSelf: reloc is b31=0 [ reloc=inst_start; ] {
# 	export *:4 reloc;
# }


rd: f_rd is f_rd { export f_rd; }
rd: f_rd is f_rd & f_rd=0 { export 0:4; }

ra: f_ra is f_ra { export f_ra; }
ra: f_ra is f_ra & f_ra=0 { export 0:4; }

rb: f_rb is f_rb { export f_rb; }
rb: f_rb is f_rb & f_rb=0 { export 0:4; }


#
# Instructions
#

:add rd, ra, rb is op=0b000'000 & rd & ra & rb {
	C = carry(ra, rb);
	rd = ra + rb;
}

:addc rd, ra, rb is op=0b000'010 & rd & ra & rb {
	local cfi:1 = carry(ra, rb);
	local s:4 = ra + rb;
	cfi = cfi || carry(s, C);
	rd = s + C;
	C = cfi;
}

:addk rd, ra, rb is op=0b000'110 & rd & ra & rb {
	rd = ra + rb
}

:addkc rd, ra, rb is op=0b'000'100 & rd & ra & rb {
	rd = ra + rb + C;
}

:nori rX, rY, imm16 is op=0x01 & rX & rY & imm16 {
	rX = ~(rY | imm16);
}

:muli rX, rY, simm16 is op=0x02 & rX & rY & simm16 {
	rX = ((rY * simm16) & 0xFFFFFFFF);
}

:sh (rX+simm16), rY is op=0x03 & rX & rY & simm16 {
	local address = rX + simm16;
	*[ram]:2 address = rY:2;
}

:lb rX, (rY+simm16) is op=0x04 & rX & rY & simm16 {
	local address = rY + simm16;
	rX = sext(*[ram]:1 address);
}

:sri rX, rY, imm5 is op=0x05 & rX & rY & imm5 {
	rX = rY s>> imm5;
}

:xori rX, rY, imm16 is op=0x06 & rX & rY & imm16 {
	rX = rY ^ imm16;
}

:lh rX, (rY+simm16) is op=0x07 & rX & rY & simm16 {
	local address = rY + simm16;
	rX = sext(*[ram]:2 address);
}

:andi rX, rY, imm16 is op=0x08 & rX & rY & imm16 {
	rX = rY & imm16;
}

:xnori rX, rY, imm16 is op=0x09 & rX & rY & imm16 {
	rX = ~(rY ^ imm16);
}

:lw rX, (rY+simm16) is op=0x0A & rX & rY & simm16 {
	local address = rY + simm16;
	rX = *[ram]:4 address;
}

:lhu rX, (rY+simm16) is op=0x0B & rX & rY & simm16 {
	local address = rY + simm16;
	rX = zext(*[ram]:2 address);
}

:sb (rX+simm16), rY is op=0x0c & rX & rY & simm16 {
	local address = rX + simm16;
	*[ram]:1 address = rY:1;
}

# :addi rX, rY, simm16 is op=0x0D & rX & rY & simm16 {
# # 	rX = rY + simm16;
# # }

# :addi rX, rY, simm16 is op=0x0D & rX & rY & simm16 {
# # 	rX = rY + simm16;
# # }

:addi rX, rY, simm16 is op=0x0D & rX & rY & simm16 {
	rX = rY + simm16;
}

:mvi rX, simm16 is op=0x0D & rX & rY & simm16 & reg0=0 {
	rX = sext(simm16:2);
}

:nop is op=0x0D & rX & rY & reg0=0 & reg1=0 & simm16=0 {
}

:ori rX, rY, imm16 is op=0x0E & rX & rY & imm16 {
	rX = rY | imm16;
}

:sli rX, rY, imm5 is op=0x0F & rX & rY & imm5 {
	rX = rY << imm5;
}

:lbu rX, (rY+simm16) is op=0x10 & rX & rY & simm16 {
	local address = rY + simm16;
	rX = zext(*[ram]:1 address);
}

:be rY, rX Rel16 is op=0x11 & rX & rY & Rel16 {
	if (rY == rX) goto Rel16;
}

:bg rY, rX Rel16 is op=0x12 & rX & rY & Rel16 {
	if (rY s> rX) goto Rel16;
}

:bge rY, rX Rel16 is op=0x13 & rX & rY & Rel16 {
	if (rY s>= rX) goto Rel16;
}

:bgeu rY, rX Rel16 is op=0x14 & rX & rY & Rel16 {
	if (rY >= rX) goto Rel16;
}

:bgu rY, rX Rel16 is op=0x15 & rX & rY & Rel16 {
	if (rY > rX) goto Rel16;
}

:sw (rX+simm16), rY is op=0x16 & rX & rY & simm16 {
	local address = rX + simm16;
	*[ram]:4 address = rY;
}

:bne rY, rX Rel16 is op=0x17 & rX & rY & Rel16 {
	if (rY != rX) goto Rel16;
}

:andhi rX, rY, imm16 is op=0x18 & rX & rY & imm16 {
	rX = rY & (imm16 << 16);
}


:cmpei rX, rY, simm16 is op=0x19 & rX & rY & simm16 {
	rX = zext(rY:4 == sext(simm16:2));
}

:cmpgi rX, rY, simm16 is op=0x1A & rX & rY & simm16 {
	rX = zext(rY:4 s> sext(simm16:2));
}

:cmpgei rX, rY, simm16 is op=0x1B & rX & rY & simm16 {
	rX = zext(rY:4 s>= sext(simm16:2));
}

:cmpgeui rX, rY, imm16 is op=0x1C & rX & rY & imm16 {
	rX = zext(rY:4 >= zext(imm16:2));
}

:cmpgui rX, rY, imm16 is op=0x1D & rX & rY & imm16 {
	rX = zext(rY:4 > zext(imm16:2));
}

:orhi rX, rY, imm16 is op=0x1E & rX & rY & imm16 {
	rX = rY | (imm16 << 16);
}

:mvhi rX, imm16 is op=0x1E & rX & rY & imm16 & reg0=0 {
	rX = imm16 << 16;
}

:cmpnei rX, rY, simm16 is op=0x1F & rX & rY & simm16 {
	rX = zext(rY:4 != sext(simm16:2));
}

:sru rX, rY, rZ is op=0x20 & rX & rY & rZ {
	rX = rY >> rZ;
}

:nor rX, rY, rZ is op=0x21 & rX & rY & rZ {
	rX = ~(rY | rZ);
}

:mul rX, rY, rZ is op=0x22 & rX & rY & rZ {
	rX = (rY * rZ) & 0xFFFFFFFF;
}

:divu rX, rY, rZ is op=0x23 & rX & rY & rZ {
	rX = rY / rZ;
}

:rcsr reg2, csr is op=0x24 & csr & reg2 {
	local tmp_csr:4 = csr;
	reg2 = csr_read(tmp_csr);
}

:sr rX, rY, rZ is op=0x25 & rX & rY & rZ {
	rX = rY s>> rZ;
}

:xor rX, rY, rZ is op=0x26 & rX & rY & rZ {
	rX = rY ^ rZ;
}

:div rX, rY, rZ is op=0x27 & rX & rY & rZ {
	rX = rY s/ rZ;
}

:and rX, rY, rZ is op=0x28 & rX & rY & rZ {
	rX = rY & rZ;
}

:xnor rX, rY, rZ is op=0x29 & rX & rY & rZ {
	rX = ~(rY ^ rZ);
}

:not rX, rY is op=0x29 & rX & rY & rZ & reg1=0 {
	rX = ~rY;
}

# 0x2A is reserved

:raise imm26 is op=0x2B & imm26 {

	local tmp:4 = imm26;
	software_interrupt(tmp);

}

:sextb rX, rY is op=0x2C & rX & rY {
	rX = (rY << 24) s>> 24;
}

# :add rX, rY, rZ is op=0x2D & rX & rY & rZ {
# # 	rX = rY + rZ;
# # }

# :add rX, rY, rZ is op=0x2D & rX & rY & rZ {
# # 	rX = rY + rZ;
# # }

:add rX, rY, rZ is op=0x2D & rX & rY & rZ {
	rX = rY + rZ;
}

:or rX, rY, rZ is op=0x2E & rX & rY & rZ {
	rX = rY | rZ;
}

:mov rX, rY is op=0x2E & rX & rY & rZ & reg1=0 {
	rX = rY;
}

:sl rX, rY, rZ is op=0x2F & rX & rY & rZ {
	rX = rY << rZ;
}

:b rX is op=0x30 & rX {
	goto [rX];
}

:ret is op=0x30 & reg0=29 {
	return [ra];
}

:modu rX, rY, rZ is op=0x31 & rX & rY & rZ {
	rX = rY % rZ;
}

:sub rX, rY, rZ is op=0x32 & rX & rY & rZ {
	rX = rY - rZ;
}

# 0x33 is reserved

:wcsr csr, reg1 is op=0x34 & reg1 & csr {
	local tmp_csr:4 = csr;
	csr_write(tmp_csr, reg1);
}

:mod rX, rY, rZ is op=0x35 & rX & rY & rZ {
	rX = rY s% rZ;
}

:call rX is op=0x36 & rX {
	ra = inst_start + 4;
	call [rX];
}

:sexth rX, rY is op=0x37 & rX & rY {
	rX = (rY << 16) s>> 16;
}

:bi Rel26 is op=0x38 & Rel26 {
	goto Rel26;
}

:cmpe rX, rY, rZ is op=0x39 & rX & rY & rZ {
	rX = zext(rY == rZ);
}

:cmpg rX, rY, rZ is op=0x3A & rX & rY & rZ {
	rX = zext(rY s> rZ);
}

:cmpge rX, rY, rZ is op=0x3B & rX & rY & rZ {
	rX = zext(rY s>= rZ);
}

:cmpgeu rX, rY, rZ is op=0x3C & rX & rY & rZ {
	rX = zext(rY >= rZ);
}

:cmpgu rX, rY, rZ is op=0x3D & rX & rY & rZ {
	rX = zext(rY > rZ);
}

:calli Rel26 is op=0x3E & Rel26 {
	ra = inst_start + 4;
	call Rel26;
}

:cmpne rX, rY, rZ is op=0x3F & rX & rY & rZ {
	rX = zext(rY != rZ);
}
